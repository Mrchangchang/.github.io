<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Mrchangchang.github.io</id>
    <title>Gridea</title>
    <updated>2021-03-16T15:50:36.747Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Mrchangchang.github.io"/>
    <link rel="self" href="https://Mrchangchang.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Mrchangchang.github.io/images/avatar.png</logo>
    <icon>https://Mrchangchang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[vue + ant-design-vue 项目兼容IE11浏览器（血泪踩坑）]]></title>
        <id>https://Mrchangchang.github.io/post/vue-ant-design-vue-xiang-mu-jian-rong-ie11-liu-lan-qi-xie-lei-cai-keng/</id>
        <link href="https://Mrchangchang.github.io/post/vue-ant-design-vue-xiang-mu-jian-rong-ie11-liu-lan-qi-xie-lei-cai-keng/">
        </link>
        <updated>2021-03-16T15:48:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="vue-cli启动项目登录成功后提示未登录">vue-cli启动项目登录成功后提示未登录</h3>
<p>解决方法：本地服务启动访问域名localhost时，ie11不支持在localhost写入cookie，须使用ip地址。不要忘记在代理设置中cookieDomainRewrite配置为ip地址，关闭之前打开的页签重试。</p>
<h3 id="页面报错findindex-is-not-a-function">页面报错<code>findIndex is not a function</code></h3>
<blockquote>
<p>es6API不存在,需要加上polyfill</p>
</blockquote>
<p>解决方法：webpack打包入口加上babel-polyfill或@babel/polyfill,如下</p>
<p>entry: {<br>
app: ['babel-polyfill', './src/main.js']<br>
}<br>
// vue-cli4写法<br>
module.exports = {<br>
chainWebpack(config) {<br>
config.entry('main').add('@babel/polyfill')<br>
}<br>
}</p>
<h3 id="第三库语法报错">第三库语法报错</h3>
<blockquote>
<p>经过排查，vue-cli的babel-loader默认会忽略node_modeules里面的文件，引入库的代码存在es6语法。</p>
</blockquote>
<p>解决方法：在vue.config.js增加transpileDependencies配置</p>
<p>module.exports = {<br>
transpileDependencies: ['xx']<br>
}<br>
​</p>
<h3 id="增删改操作后请求数据显示来自缓存">增删改操作后，请求数据显示来自缓存</h3>
<p>解决方法：判断是否为IE浏览器，拦截请求请求参数带上时间戳</p>
<p>// axios<br>
// 判断是否为ie11<br>
const isIE = navigator.userAgent.indexOf('Trident') &gt; -1 &amp;&amp; navigator.userAgent.indexOf('rv:11.0') &gt; -1<br>
// request 拦截<br>
axiosX.interceptors.request.use(<br>
config =&gt; {<br>
if (isIE &amp;&amp; config.method.toLocaleLowerCase() === 'get') {<br>
config.params = Object.assign({}, config.params, {t: Date.now()})<br>
}<br>
return config<br>
},<br>
err =&gt; {<br>
return Promise.reject(err)<br>
}<br>
)<br>
​</p>
<h3 id="new-date提示invalid-date">new Date()提示invalid date</h3>
<p>解决方法： new Date()参数中<code>-</code>替换为<code>/</code></p>
<h3 id="vue自定义组件在父组件中使用内样式无效">vue自定义组件在父组件中使用，内样式无效</h3>
<p>解决方法：在父组件中不要加内样式，使用class</p>
<p>//错误姿势, 内样式不会被编译<br>
<template></p>
 <div>
 <my-component style="color: #333"></my-component>
 </div>
</template>
//正确姿势，使用class
<template>
 <div>
 <my-component class="text3"></my-component>
 </div>
</template>
<h3 id="使用ant-design-vue中input-number开发环境正常打包后不生效点击步进器报错">使用ant-design-vue中input-number开发环境正常，打包后不生效，点击步进器报错</h3>
<p>解决方法：使用input-number组件，加上step 参数</p>
<h3 id="使用-ant-design-vue中steps组件开发环境正常步骤序号为nan">使用 ant-design-vue中steps组件开发环境正常，步骤序号为NaN</h3>
<p>解决方法：使用step组件，加上initial参数</p>
<h3 id="下载文件请求参数中有中文控制台中文参数显示为乱码请求报错">下载文件请求参数中有中文，控制台中文参数显示为乱码，请求报错</h3>
<p>解决方法：中文参数使用encodeURIComponent API编码中文参数</p>
<h3 id="使用ant-design-vue总input-textarea点击清除icon不生效">使用ant-design-vue总input、TextArea点击清除icon不生效</h3>
<blockquote>
<p>input, textarea标签在maxLEngth属性设置为-1在IE中会无法粘贴</p>
</blockquote>
<p>解决方法：入口文件增加如下代码</p>
<p>// mian.js<br>
import Vue from 'vue'<br>
import Antd, {Input} from 'ant-design-vue'<br>
// IE11环境下Input组件清空异常 https://github.com/vueComponent/ant-design-vue/issues/2592<br>
Vue.use(Antd)<br>
if (!!window.ActiveXObject || 'ActiveXObject' in window) {<br>
Input.methods.handleReset = function() {<br>
this.stateValue = ''<br>
this.$emit('change.value', '')<br>
}</p>
<p>Input.TextArea.methods.handleReset = function () {<br>
this.stateValue = ''<br>
this.$emit('change.value', '')<br>
}<br>
}</p>
<h3 id="在ie浏览器中复制会在后面加上一个空格">在IE浏览器中复制会在后面加上一个空格</h3>
<p>解决方法：在input中加上trim修饰符</p>
<input v-model.trim="value"/>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[window常用命令]]></title>
        <id>https://Mrchangchang.github.io/post/window-chang-yong-ming-ling/</id>
        <link href="https://Mrchangchang.github.io/post/window-chang-yong-ming-ling/">
        </link>
        <updated>2020-11-24T09:42:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="查看电脑连接的wifi">查看电脑连接的wifi</h3>
<ul>
<li>输入<code>netsh wlan show profiles</code>  查看所有连接过的wifi</li>
<li>然后 <code>netsh wlan show profile name=&quot;连接名&quot; key=clear</code></li>
</ul>
<h3 id="修改启动项">修改启动项</h3>
<blockquote>
<p>开始菜单在搜索程序框中输入 <code>msconfig</code> 命令打开系统配置窗口后找到 <code>启动</code> 选项</p>
</blockquote>
<h3 id="手动清除木马">手动清除木马</h3>
<ul>
<li>查找开机启动项</li>
<li>查询服务</li>
<li>查看网络端口连接
<blockquote>
<p>win +r 打开运行<br>输入cmd 回车<br>输入 netstat -anp<br>常见木马端口<br>4444<br>8888<br>9527</p></blockquote>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nodeJs常用npm包合集]]></title>
        <id>https://Mrchangchang.github.io/post/nodejs-chang-yong-npm-bao-he-ji/</id>
        <link href="https://Mrchangchang.github.io/post/nodejs-chang-yong-npm-bao-he-ji/">
        </link>
        <updated>2020-11-24T01:32:03.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>收藏平时工作中可能用到npm包。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>收藏平时工作中可能用到npm包。</p>
</blockquote>
<!-- more -->
<ul>
<li>chalk 粉笔工具，在控制台打印有色彩的log；</li>
<li>fs-extra fs-extra模块是系统fs模块的扩展，提供了更多便利的 API，并继承了fs模块的 AP，<a href="https://blog.csdn.net/weixin_33968104/article/details/88005109">参考文章</a></li>
<li>glob node的glob模块允许你使用 *等符号, 来写一个glob规则,像在shell里一样,获取匹配对应规则的文件. <a href="https://www.cnblogs.com/xinxingyu/p/5736244.html">参考文章</a></li>
<li>svg-captcha 生成svg图片验证码；</li>
<li>commitizen 格式化git commit 提交信息，<a href="https://segmentfault.com/a/1190000020924364?utm_source=tag-newest">参考文章</a></li>
<li>highlight.js 代码高亮显示</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[搭建一个移动端vite+ts项目]]></title>
        <id>https://Mrchangchang.github.io/post/da-jian-yi-ge-yi-dong-duan-vitets-xiang-mu/</id>
        <link href="https://Mrchangchang.github.io/post/da-jian-yi-ge-yi-dong-duan-vitets-xiang-mu/">
        </link>
        <updated>2020-11-20T08:53:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="快速开始">快速开始</h3>
<blockquote>
<p>vue项目只支持vue3</p>
</blockquote>
<pre><code>$ npm init vite-app &lt;project-name&gt;
$ cd &lt;project-name&gt;
$ npm install
$ npm run dev
</code></pre>
<p>or 使用 yarn</p>
<pre><code>$ yarn create vite-app &lt;project-name&gt;
$ cd &lt;project-name&gt;
$ yarn
$ yarn dev
</code></pre>
<h3 id="参考配置">参考配置</h3>
<pre><code class="language-js">const isProd = process.env.Mode === 'production'

 module.exports = {
   // 项目上下文
  base: '/h5/mobile-cli-next/',
  // 打包输出目录
  outDir: 'mobile-cli-next',
  alias: {
    '/@/': resolve(__dirname,'./src'),
    components: resolve(__dirname,&quot;src/components&quot;)
  },
  // css预处理器
  cssPreprocessOptions: {
    scss: {
      additionalData:
        `@import &quot;src/assets/scss/_mixin.scss&quot;; @import &quot;src/assets/scss/_variables.scss&quot;; @import &quot;src/assets/scss/common.scss&quot;;`
    }
  },
  // 清除debug
  terserOptions: isProd ? {
    compress: {
      drop_debugger: true,
      drop_console: true
    } 
  } : undefined,
  // rollup插件
  rollupInputOptions: {
    plugins: [
      zip()
    ]
  }
 }
</code></pre>
<h3 id="alias别名配置问题">alias别名配置问题</h3>
<blockquote>
<p>vite 引入模块的时候 如果不是以./或者/开头的会被视为依赖，在前面加上/@modules/xxx来进行请求<br>
vite 别名在vite.config.ts内配置,需要以 /开头</p>
</blockquote>
<pre><code class="language-js">module.exports = {
    alias: {
         '/@/': resolve(__dirname,'./src'),
    }
}
</code></pre>
<blockquote>
<p>项目中使用</p>
</blockquote>
<pre><code>import baseConfig from '/@/config/config.base'
</code></pre>
<blockquote>
<p>tsconfig.json 中配置</p>
</blockquote>
<pre><code class="language-json">{
    &quot;compilerOptions&quot;: {
        &quot;paths&quot;: {
        &quot;/@/*&quot;: [
            &quot;src/*&quot;
             ]
        }
    }
}
</code></pre>
<h3 id="ts中使用axios拦截器返回promis类型会提示不正确">ts中使用axios拦截器，返回Promis类型会提示不正确</h3>
<blockquote>
<p>解决方法，封装axios时给返回值进行断言</p>
</blockquote>
<pre><code class="language-js">((result as unknown) as Promise&lt;Data&gt;)
</code></pre>
<h3 id="vite项目html使用ejs模板插入代码问题使用插件">vite项目，html使用ejs模板插入代码问题，使用插件🐶</h3>
<blockquote>
<p><a href="https://github.com/anncwb/vite-plugin-html">使用插件</a></p>
</blockquote>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/176704807">vite文档翻译</a></li>
<li><a href="https://github.com/vitejs/vite/blob/master/src/node/config.ts">配置参考</a></li>
<li><a href="http://www.wazhi.com.cn/SchoolManage/NewsDispatcher?NewsId=440f7377-b293-4243-b629-bbf90bdf5231&amp;SchoolId=1168&amp;action=singlenews">vite介绍</a></li>
<li><a href="https://github.com/rollup/awesome">rollup插件</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uglifyjs-webpack-plugin 插件废弃，改用uglifyjs-webpack-plugin ]]></title>
        <id>https://Mrchangchang.github.io/post/uglifyjs-webpack-plugin-cha-jian-fei-qi-gai-yong-uglifyjs-webpack-plugin/</id>
        <link href="https://Mrchangchang.github.io/post/uglifyjs-webpack-plugin-cha-jian-fei-qi-gai-yong-uglifyjs-webpack-plugin/">
        </link>
        <updated>2020-11-11T09:04:57.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>uglifyjs-webpack-plugin压缩es6代码报错，后续也不会更新，改用uglifyjs-webpack-plugin&gt;压缩代码,配置如下，<br>
详细配置说明：https://github.com/terser/terser#compress-options</p>
</blockquote>
<pre><code class="language-js">const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);
module.exports = {
  configureWebpack: {
    minimizer: [
      new TerserPlugin({
        terserOptions: {
          compress: {
            pure_funcs: [&quot;console.log&quot;]
          }
        }
      })
    ]
  }
}
</code></pre>
<p>来源：https://segmentfault.com/a/1190000020185466?utm_source=tag-newest</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简单zip压缩webpack plugin插件]]></title>
        <id>https://Mrchangchang.github.io/post/jian-dan-zip-ya-suo-webpack-plugin-cha-jian/</id>
        <link href="https://Mrchangchang.github.io/post/jian-dan-zip-ya-suo-webpack-plugin-cha-jian/">
        </link>
        <updated>2020-11-11T03:25:29.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>功能很简单，webpack压缩成功后输入一个zip的压缩包</p>
</blockquote>
<pre><code class="language-js">const fs = require('fs')
const archiver = require('archiver')
const path = require('path')
const rm = require('rimraf')

class ZipWebpackPlugin {
  constructor (option = {}) {
    this.dir = option.dir
  }
  apply(compiler) {
    compiler.hooks.afterEmit.tapAsync('zipWebpackPlug', (compilation, cb) =&gt; {
      
      const currentPath = path.resolve(__dirname, this.dir)
      
      console.log( '输入路径:%S',currentPath);
      function done (currentPath) {
        const outputName = path.basename(currentPath)
        const output = fs.createWriteStream(`${currentPath}.zip`)
        const archive = archiver('zip')
        output.on('close', function () {
          console.log('压缩完成')
        })
        output.on('end', function () {
          console.log('压缩完成')
        })
        archive.on('err', function (err) {
          throw err
        })
        archive.pipe(output)
        archive.glob(`${outputName}/**`)
        archive.finalize()
      }
      if (fs.existsSync(`${this.dir}.zip`)) {
        console.log('删除zip包')
        rm(`${this.dir}.zip`, err =&gt; {
          if (err) throw err
         done(currentPath)
         cb()
        })
      } else {
        done(currentPath)
        cb()
      }
      
      
    })
  }
}

module.exports = ZipWebpackPlugin
</code></pre>
<blockquote>
<p>在webpack配置中使用</p>
</blockquote>
<p>···<br>
module.exports = {<br>
plugin: [<br>
new ZipPlugin({dir: path.join(__dirname, outputDir)})<br>
]<br>
}<br>
···</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Mrchangchang.github.io/post/hello-gridea/</id>
        <link href="https://Mrchangchang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>