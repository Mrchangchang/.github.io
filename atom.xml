<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Mrchangchang.github.io</id>
    <title>Gridea</title>
    <updated>2020-11-23T16:56:37.525Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Mrchangchang.github.io"/>
    <link rel="self" href="https://Mrchangchang.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://Mrchangchang.github.io/images/avatar.png</logo>
    <icon>https://Mrchangchang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[搭建一个移动端vite+ts项目]]></title>
        <id>https://Mrchangchang.github.io/post/da-jian-yi-ge-yi-dong-duan-vitets-xiang-mu/</id>
        <link href="https://Mrchangchang.github.io/post/da-jian-yi-ge-yi-dong-duan-vitets-xiang-mu/">
        </link>
        <updated>2020-11-20T08:53:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="快速开始">快速开始</h3>
<blockquote>
<p>vue项目只支持vue3</p>
</blockquote>
<pre><code>$ npm init vite-app &lt;project-name&gt;
$ cd &lt;project-name&gt;
$ npm install
$ npm run dev
</code></pre>
<p>or 使用 yarn</p>
<pre><code>$ yarn create vite-app &lt;project-name&gt;
$ cd &lt;project-name&gt;
$ yarn
$ yarn dev
</code></pre>
<h3 id="参考配置">参考配置</h3>
<pre><code class="language-js">const isProd = process.env.Mode === 'production'

 module.exports = {
   // 项目上下文
  base: '/h5/mobile-cli-next/',
  // 打包输出目录
  outDir: 'mobile-cli-next',
  alias: {
    '/@/': resolve(__dirname,'./src'),
    components: resolve(__dirname,&quot;src/components&quot;)
  },
  // css预处理器
  cssPreprocessOptions: {
    scss: {
      additionalData:
        `@import &quot;src/assets/scss/_mixin.scss&quot;; @import &quot;src/assets/scss/_variables.scss&quot;; @import &quot;src/assets/scss/common.scss&quot;;`
    }
  },
  // 清除debug
  terserOptions: isProd ? {
    compress: {
      drop_debugger: true,
      drop_console: true
    } 
  } : undefined,
  // rollup插件
  rollupInputOptions: {
    plugins: [
      zip()
    ]
  }
 }
</code></pre>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/176704807">vite readme文档翻译</a></p>
</li>
<li>
<p><a href="https://github.com/vitejs/vite/blob/master/src/node/config.ts">vite.config.js配置参考 </a></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uglifyjs-webpack-plugin 插件废弃，改用uglifyjs-webpack-plugin ]]></title>
        <id>https://Mrchangchang.github.io/post/uglifyjs-webpack-plugin-cha-jian-fei-qi-gai-yong-uglifyjs-webpack-plugin/</id>
        <link href="https://Mrchangchang.github.io/post/uglifyjs-webpack-plugin-cha-jian-fei-qi-gai-yong-uglifyjs-webpack-plugin/">
        </link>
        <updated>2020-11-11T09:04:57.000Z</updated>
        <summary type="html"><![CDATA[<p>uglifyjs-webpack-plugin压缩es6代码报错，后续也不会更新，改用uglifyjs-webpack-plugin压缩代码,配置如下，</p>
<blockquote>
<p>详细配置说明：https://github.com/terser/terser#compress-options</p>
</blockquote>
<pre><code>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);
module.exports = {
  configureWebpack: {
    minimizer: [
      new TerserPlugin({
        terserOptions: {
          compress: {
            pure_funcs: [&quot;console.log&quot;]
          }
        }
      })
    ]
  }
}
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p>uglifyjs-webpack-plugin压缩es6代码报错，后续也不会更新，改用uglifyjs-webpack-plugin压缩代码,配置如下，</p>
<blockquote>
<p>详细配置说明：https://github.com/terser/terser#compress-options</p>
</blockquote>
<pre><code>const TerserPlugin = require(&quot;terser-webpack-plugin&quot;);
module.exports = {
  configureWebpack: {
    minimizer: [
      new TerserPlugin({
        terserOptions: {
          compress: {
            pure_funcs: [&quot;console.log&quot;]
          }
        }
      })
    ]
  }
}
</code></pre>
<!-- more -->
<p>来源：https://segmentfault.com/a/1190000020185466?utm_source=tag-newest</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简单zip压缩webpack plugin插件]]></title>
        <id>https://Mrchangchang.github.io/post/jian-dan-zip-ya-suo-webpack-plugin-cha-jian/</id>
        <link href="https://Mrchangchang.github.io/post/jian-dan-zip-ya-suo-webpack-plugin-cha-jian/">
        </link>
        <updated>2020-11-11T03:25:29.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>功能很简单，webpack压缩成功后输入一个zip的压缩包</p>
</blockquote>
<pre><code>const fs = require('fs')
const archiver = require('archiver')
const path = require('path')
const rm = require('rimraf')


class ZipWebpackPlugin {
  constructor (option = {}) {
    this.dir = option.dir
  }
  apply(compiler) {
    compiler.hooks.afterEmit.tapAsync('zipWebpackPlug', (compilation, cb) =&gt; {
      
      const currentPath = path.resolve(__dirname, this.dir)
      
      console.log( '输入路径:%S',currentPath);
      function done (currentPath) {
        const outputName = path.basename(currentPath)
        const output = fs.createWriteStream(`${currentPath}.zip`)
        const archive = archiver('zip')
        output.on('close', function () {
          console.log('压缩完成')
        })
        output.on('end', function () {
          console.log('压缩完成')
        })
        archive.on('err', function (err) {
          throw err
        })
        archive.pipe(output)
        archive.glob(`${outputName}/**`)
        archive.finalize()
      }
      if (fs.existsSync(`${this.dir}.zip`)) {
        console.log('删除zip包')
        rm(`${this.dir}.zip`, err =&gt; {
          if (err) throw err
         done(currentPath)
         cb()
        })
      } else {
        done(currentPath)
        cb()
      }
      
      
    })
  }
}

module.exports = ZipWebpackPlugin
</code></pre>
<blockquote>
<p>在webpack配置中使用</p>
</blockquote>
<p>···<br>
module.exports = {<br>
plugin: [<br>
new ZipPlugin({dir: path.join(__dirname, outputDir)})<br>
]<br>
}<br>
···</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Mrchangchang.github.io/post/hello-gridea/</id>
        <link href="https://Mrchangchang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>